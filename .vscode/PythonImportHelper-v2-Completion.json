[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    re_password = dataDict[\"re_password\"]\n    # Memeriksa apakah password sama dengan re_password\n    if password != re_password:\n        return {\n            \"message\" : \"Password tidak sama!\"",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123505",
        "description": ".history.app_20240520123505",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123505",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    re_password = dataDict[\"re_password\"]\n    # Memeriksa apakah password sama dengan re_password\n    if password != re_password:\n        return {\n            \"message\" : \"Password tidak sama!\"",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123727",
        "description": ".history.app_20240520123727",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123727",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah password sama dengan re_password\n    if password != re_password:\n        return {\n            \"message\" : \"Password tidak sama!\"\n        }, 400",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123749",
        "description": ".history.app_20240520123749",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123749",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123755",
        "description": ".history.app_20240520123755",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123755",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123821",
        "description": ".history.app_20240520123821",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123821",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520123823",
        "description": ".history.app_20240520123823",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520123823",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520124239",
        "description": ".history.app_20240520124239",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520124239",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520124241",
        "description": ".history.app_20240520124241",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520124241",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520124244",
        "description": ".history.app_20240520124244",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520124244",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240520124300",
        "description": ".history.app_20240520124300",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240520124300",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521213444",
        "description": ".history.app_20240521213444",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240521213444",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\napp = Flask(__name__)\nCORS(app)\n# Change this to your actual database URI\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# Change this to a secure secret key\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "class User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)\n    name: Mapped[str] = mapped_column(String(255))\n    password: Mapped[str] = mapped_column(String(255))\nclass ApiKey(db.Model):\n    api_key: Mapped[str] = mapped_column(String(255), primary_key=True)\n@jwt.user_lookup_loader\ndef user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "class ApiKey(db.Model):\n    api_key: Mapped[str] = mapped_column(String(255), primary_key=True)\n@jwt.user_lookup_loader\ndef user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET', 'POST', 'PUT', 'DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET', 'POST', 'PUT', 'DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json()\n        email = dataDict.get(\"email\")\n        name = dataDict.get(\"name\")",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json()\n        email = dataDict.get(\"email\")\n        name = dataDict.get(\"name\")\n        user = User(email=email, name=name)\n        db.session.add(user)\n        db.session.commit()\n        return {\"message\": \"Success\", \"data\": f\"email: {email}, name : {name}\"}, 200\n    elif request.method == 'PUT':",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password or not name:\n        return {\"message\": \"All fields are required\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def login():\n    data = request.get_json()\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email and password are required\"}, 400\n    user = User.query.filter_by(email=email).one_or_none()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Invalid email or password\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    return {\n        \"id\": user.id,\n        \"email\": user.email,\n        \"name\": user.name,\n    }, 200\n@app.route(\"/who\", methods=['GET'])\n@jwt_required()",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "def protected():\n    user = current_user\n    return jsonify(\n        id=user.id,\n        email=user.email,\n        name=user.name,\n    ), 200\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Change this to your actual database URI\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# Change this to a secure secret key\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(model_class=Base)\ndb.init_app(app)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# Change this to a secure secret key\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(model_class=Base)\ndb.init_app(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# Change this to a secure secret key\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(model_class=Base)\ndb.init_app(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(model_class=Base)\ndb.init_app(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)\n    name: Mapped[str] = mapped_column(String(255))\n    password: Mapped[str] = mapped_column(String(255))",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(model_class=Base)\ndb.init_app(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)\n    name: Mapped[str] = mapped_column(String(255))\n    password: Mapped[str] = mapped_column(String(255))\nclass ApiKey(db.Model):",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "db = SQLAlchemy(model_class=Base)\ndb.init_app(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)\n    name: Mapped[str] = mapped_column(String(255))\n    password: Mapped[str] = mapped_column(String(255))\nclass ApiKey(db.Model):\n    api_key: Mapped[str] = mapped_column(String(255), primary_key=True)",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521213654",
        "description": ".history.app_20240521213654",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), unique=True)\n    name: Mapped[str] = mapped_column(String(255))\n    password: Mapped[str] = mapped_column(String(255))\nclass ApiKey(db.Model):\n    api_key: Mapped[str] = mapped_column(String(255), primary_key=True)\n@jwt.user_lookup_loader\ndef user_lookup_callback(_jwt_header, jwt_data):",
        "detail": ".history.app_20240521213654",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "class Base(DeclarativeBase): \n    pass #Blank body class, but \"Base\" class inherits \"DeclarativeBase\" class\napp = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "class User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "class ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):\n#     return user.id\n# @jwt.user_lookup_loader\n# def user_lookup_callback(_jwt_header, jwt_data):\n#     id = jwt_data[\"sub\"]\n#     return User.query.filter_by(id=id).one_or_none()\n@jwt.user_lookup_loader",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "user_lookup_callback",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    return User.query.filter_by(id=identity).one_or_none()\n@app.route(\"/user\", methods=['GET','POST','PUT','DELETE'])\n@jwt_required()\ndef user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def user():\n    if request.method == 'POST':\n        dataDict = request.get_json() #It return dictionary.\n        email = dataDict[\"email\"]\n        name = dataDict[\"name\"]\n        user = User(\n            email= email,\n            name = name,\n        )\n        db.session.add(user)",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def signup():\n    dataDict = request.get_json() # Mendapatkan data JSON dari request\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    # Memeriksa apakah email terisi\n    if not email:\n        return {\n            \"message\" : \"Email harus diisi\"\n        }, 400",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "sigin",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def sigin():\n    #catch the Authorization header\n    base64Str = request.headers.get('Authorization')\n    base64Str = base64Str[6:] # hapus \"Basic\" string\n    #Mulai Base64 Decode\n    base64Bytes = base64Str.encode('ascii')\n    messageBytes = base64.b64decode(base64Bytes)\n    pair = messageBytes.decode('ascii')\n    #Akhir Base64 Decode\n    email, password = pair.split(\":\")",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = db.session.execute(\n        db.select(User)",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\" : current_user.id,\n        \"email\" : current_user.email,\n        \"name\" : current_user.name,\n    }\n@app.get(\"/who\")\n@jwt_required()\ndef protected():",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "def protected():\n    # We can now access our sqlalchemy User object via current_user.\n    return jsonify(\n        id=current_user.id,\n        email=current_user.email,\n        name=current_user.name,\n    )\n# @app.route(\"/\")\n# def hello_world():\n#     return {",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "app = Flask(__name__) # Instantiate Flask\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"  #\"mysql://username:password@localhost/databasename\"  \ndb = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "db = SQLAlchemy(model_class=Base) # Instantiate SQLALchemy\ndb.init_app(app)\n# Setup the Flask-JWT-Extended extension\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"  # Change this!\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521213732",
        "description": ".history.app_20240521213732",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model): #User class inherit Model class\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nclass ApiKey(db.Model): #User class inherit Model class\n    api_key: Mapped[str] = mapped_column(primary_key=True)\n# @jwt.user_identity_loader\n# def user_identity_lookup(user):",
        "detail": ".history.app_20240521213732",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "def signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan password diperlukan\"}), 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "def signin():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan kata sandi diperlukan\"}), 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return jsonify({\"message\": \"Email atau kata sandi salah\"}), 401\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    user = User.query.filter_by(id=current_user).first()\n    if not user:\n        return jsonify({\"message\": \"User tidak ditemukan\"}), 404\n    return jsonify({\"id\": user.id, \"email\": user.email, \"name\": user.name}), 200\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "db = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521214015",
        "description": ".history.app_20240521214015",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')",
        "detail": ".history.app_20240521214015",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "def signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan password diperlukan\"}), 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "def signin():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan kata sandi diperlukan\"}), 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return jsonify({\"message\": \"Email atau kata sandi salah\"}), 401\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    user = User.query.filter_by(id=current_user).first()\n    if not user:\n        return jsonify({\"message\": \"User tidak ditemukan\"}), 404\n    return jsonify({\"id\": user.id, \"email\": user.email, \"name\": user.name}), 200\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "db = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521214016",
        "description": ".history.app_20240521214016",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')",
        "detail": ".history.app_20240521214016",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "def signup():\n    data = request.json\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan password diperlukan\"}), 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "def signin():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return jsonify({\"message\": \"Email dan kata sandi diperlukan\"}), 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return jsonify({\"message\": \"Email atau kata sandi salah\"}), 401\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    user = User.query.filter_by(id=current_user).first()\n    if not user:\n        return jsonify({\"message\": \"User tidak ditemukan\"}), 404\n    return jsonify({\"id\": user.id, \"email\": user.email, \"name\": user.name}), 200\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\ndb = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "db = SQLAlchemy(app)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521214206",
        "description": ".history.app_20240521214206",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    name = data.get('name')",
        "detail": ".history.app_20240521214206",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "class User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n@app.post('/signup')\ndef signup():\n    dataDict = request.get_json()\n    name = dataDict[\"name\"]",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "def signup():\n    dataDict = request.get_json()\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    if not email:\n        return {\n            \"message\": \"Email harus diisi\"\n        }, 400\n    hashed_password = PasswordHasher().hash(password)",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\": current_user.id,\n        \"email\": current_user.email,\n        \"name\": current_user.name,\n    }\nif __name__ == \"__main__\":\n    app.run()",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521214905",
        "description": ".history.app_20240521214905",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n@app.post('/signup')\ndef signup():\n    dataDict = request.get_json()",
        "detail": ".history.app_20240521214905",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "class User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n# Sisanya adalah kode yang sama seperti sebelumnya\n@app.post('/signup')\ndef signup():\n    dataDict = request.get_json()",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "def signup():\n    dataDict = request.get_json()\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    if not email:\n        return {\n            \"message\": \"Email harus diisi\"\n        }, 400\n    hashed_password = PasswordHasher().hash(password)",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\": current_user.id,\n        \"email\": current_user.email,\n        \"name\": current_user.name,\n    }\nif __name__ == \"__main__\":\n    app.run()",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n# Sisanya adalah kode yang sama seperti sebelumnya",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n# Sisanya adalah kode yang sama seperti sebelumnya\n@app.post('/signup')",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521215107",
        "description": ".history.app_20240521215107",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\ndb.create_all()\n# Sisanya adalah kode yang sama seperti sebelumnya\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240521215107",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "class User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n    # Sisanya adalah kode yang sama seperti sebelumnya\n# Sisanya adalah kode yang sama seperti sebelumnya\n@app.post('/signup')",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "def signup():\n    dataDict = request.get_json()\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    if not email:\n        return {\n            \"message\": \"Email harus diisi\"\n        }, 400\n    hashed_password = PasswordHasher().hash(password)",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "def profile():\n    current_user = get_jwt_identity()\n    return {\n        \"id\": current_user.id,\n        \"email\": current_user.email,\n        \"name\": current_user.name,\n    }\nif __name__ == \"__main__\":\n    app.run()",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n    # Sisanya adalah kode yang sama seperti sebelumnya",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240521215213",
        "description": ".history.app_20240521215213",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n    # Sisanya adalah kode yang sama seperti sebelumnya\n# Sisanya adalah kode yang sama seperti sebelumnya",
        "detail": ".history.app_20240521215213",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "class User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    dataDict = request.get_json()",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "def signup():\n    dataDict = request.get_json()\n    name = dataDict[\"name\"]\n    email = dataDict[\"email\"]\n    password = dataDict[\"password\"]\n    if not email:\n        return {\n            \"message\": \"Email harus diisi\"\n        }, 400\n    hashed_password = PasswordHasher().hash(password)",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\n            \"message\": \"Email dan kata sandi diperlukan!\"\n        }, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\n            \"message\": \"Pengguna tidak ditemukan.\"\n        }, 404\n    return {\n        \"id\": user.id,\n        \"email\": user.email,",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530222825",
        "description": ".history.app_20240530222825",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    name: Mapped[str]\n    password: Mapped[str]\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530222825",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530224054",
        "description": ".history.app_20240530224054",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530224054",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530224056",
        "description": ".history.app_20240530224056",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530224056",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530224427",
        "description": ".history.app_20240530224427",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530224427",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530224428",
        "description": ".history.app_20240530224428",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530224428",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})  # Mengizinkan permintaan dari alamat yang berbeda\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225252",
        "description": ".history.app_20240530225252",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225252",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225253",
        "description": ".history.app_20240530225253",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225253",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225505",
        "description": ".history.app_20240530225505",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225505",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225525",
        "description": ".history.app_20240530225525",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225525",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225529",
        "description": ".history.app_20240530225529",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225529",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225532",
        "description": ".history.app_20240530225532",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225532",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225538",
        "description": ".history.app_20240530225538",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225538",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225546",
        "description": ".history.app_20240530225546",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225546",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225548",
        "description": ".history.app_20240530225548",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225548",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225550",
        "description": ".history.app_20240530225550",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225550",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:50337/\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225601",
        "description": ".history.app_20240530225601",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225601",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:50337/\"}})\nhttp: // localhost: 50337/\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225605",
        "description": ".history.app_20240530225605",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225605",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:50337/\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225609",
        "description": ".history.app_20240530225609",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225609",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225750",
        "description": ".history.app_20240530225750",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225750",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():\n    data = request.get_json()",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "app = Flask(__name__)\n# Mengizinkan permintaan dari alamat yang berbeda\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530225756",
        "description": ".history.app_20240530225756",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.post('/signup')\ndef signup():",
        "detail": ".history.app_20240530225756",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path\n@app.post('/signup')\ndef signup():\n    # Kode signup tetap sama\n@app.post(\"/login\")\ndef login():\n    # Kode login tetap sama\n@app.get(\"/myprofile\")\n@jwt_required()",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "def signup():\n    # Kode signup tetap sama\n@app.post(\"/login\")\ndef login():\n    # Kode login tetap sama\n@app.get(\"/myprofile\")\n@jwt_required()\ndef profile():\n    # Kode profile tetap sama\nif __name__ == \"__main__\":",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "def login():\n    # Kode login tetap sama\n@app.get(\"/myprofile\")\n@jwt_required()\ndef profile():\n    # Kode profile tetap sama\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "def profile():\n    # Kode profile tetap sama\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530230123",
        "description": ".history.app_20240530230123",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():",
        "detail": ".history.app_20240530230123",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530230255",
        "description": ".history.app_20240530230255",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():",
        "detail": ".history.app_20240530230255",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530232505",
        "description": ".history.app_20240530232505",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():",
        "detail": ".history.app_20240530232505",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'  # Pesan sambutan saat mengakses root path\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240530232514",
        "description": ".history.app_20240530232514",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  # Tambahkan endpoint root path\ndef home():",
        "detail": ".history.app_20240530232514",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  \ndef home():\n    return 'Welcome to my Flask app!'  ",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'  \n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  ",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531000222",
        "description": ".history.app_20240531000222",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')  \ndef home():",
        "detail": ".history.app_20240531000222",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531000228",
        "description": ".history.app_20240531000228",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531000228",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002750",
        "description": ".history.app_20240531002750",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002750",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002752",
        "description": ".history.app_20240531002752",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002752",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002806",
        "description": ".history.app_20240531002806",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002806",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password =\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002808",
        "description": ".history.app_20240531002808",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002808",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002814",
        "description": ".history.app_20240531002814",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002814",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get()\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002815",
        "description": ".history.app_20240531002815",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002815",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"p\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002817",
        "description": ".history.app_20240531002817",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002817",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"password\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002820",
        "description": ".history.app_20240531002820",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002820",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"password\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002831",
        "description": ".history.app_20240531002831",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002831",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"password\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002835",
        "description": ".history.app_20240531002835",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002835",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"password\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002840",
        "description": ".history.app_20240531002840",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002840",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    new_password = data.get(\"password\")\n    if not new_name or not new_email:",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002843",
        "description": ".history.app_20240531002843",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002843",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002851",
        "description": ".history.app_20240531002851",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002851",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = PasswordHasher().hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not PasswordHasher().verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002853",
        "description": ".history.app_20240531002853",
        "peekOfCode": "jwt = JWTManager(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002853",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240531002953",
        "description": ".history.app_20240531002953",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531002953",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240531004456",
        "description": ".history.app_20240531004456",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240531004456",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602234749",
        "description": ".history.app_20240602234749",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602234749",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602234753",
        "description": ".history.app_20240602234753",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602234753",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602235132",
        "description": ".history.app_20240602235132",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602235132",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602235134",
        "description": ".history.app_20240602235134",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602235134",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602235255",
        "description": ".history.app_20240602235255",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602235255",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai dan enkripsi ke dalam format base64",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "jwt_manager",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "jwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602235414",
        "description": ".history.app_20240602235414",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602235414",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "jwt_manager",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "jwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240602235531",
        "description": ".history.app_20240602235531",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240602235531",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    # Buat token JWT dengan payload yang sesuai",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "jwt_manager",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "jwt_manager = JWTManager(app)  # Mengubah nama variabel jwt menjadi jwt_manager\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603004518",
        "description": ".history.app_20240603004518",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603004518",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603004554",
        "description": ".history.app_20240603004554",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603004554",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603004555",
        "description": ".history.app_20240603004555",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603004555",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103351",
        "description": ".history.app_20240603103351",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103351",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103447",
        "description": ".history.app_20240603103447",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103447",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103500",
        "description": ".history.app_20240603103500",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103500",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103503",
        "description": ".history.app_20240603103503",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103503",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103509",
        "description": ".history.app_20240603103509",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103509",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103518",
        "description": ".history.app_20240603103518",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103518",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240603103521",
        "description": ".history.app_20240603103521",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240603103521",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240604005422",
        "description": ".history.app_20240604005422",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240604005422",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240604091743",
        "description": ".history.app_20240604091743",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240604091743",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240604091811",
        "description": ".history.app_20240604091811",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240604091811",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240604223208",
        "description": ".history.app_20240604223208",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240604223208",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605141629",
        "description": ".history.app_20240605141629",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605141629",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605193752",
        "description": ".history.app_20240605193752",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605193752",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "app = Flask(_name_)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202649",
        "description": ".history.app_20240605202649",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202649",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202718",
        "description": ".history.app_20240605202718",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202718",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "app = Flask(_name_)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202722",
        "description": ".history.app_20240605202722",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202722",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202723",
        "description": ".history.app_20240605202723",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202723",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "app = Flask(_name_)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202737",
        "description": ".history.app_20240605202737",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202737",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "app = Flask(_name_)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202741",
        "description": ".history.app_20240605202741",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202741",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "app = Flask(_name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202803",
        "description": ".history.app_20240605202803",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202803",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202805",
        "description": ".history.app_20240605202805",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202805",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202843",
        "description": ".history.app_20240605202843",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202843",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202850",
        "description": ".history.app_20240605202850",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202850",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202853",
        "description": ".history.app_20240605202853",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202853",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605202855",
        "description": ".history.app_20240605202855",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605202855",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605203319",
        "description": ".history.app_20240605203319",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605203319",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/\": {\"origins\": \"\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605203320",
        "description": ".history.app_20240605203320",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605203320",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605203324",
        "description": ".history.app_20240605203324",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605203324",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240605212356",
        "description": ".history.app_20240605212356",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240605212356",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240606104840",
        "description": ".history.app_20240606104840",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240606104840",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240606122731",
        "description": ".history.app_20240606122731",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240606122731",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240607132415",
        "description": ".history.app_20240607132415",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240607132415",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240607132517",
        "description": ".history.app_20240607132517",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240607132517",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240607141044",
        "description": ".history.app_20240607141044",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240607141044",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240608220231",
        "description": ".history.app_20240608220231",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240608220231",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240610104437",
        "description": ".history.app_20240610104437",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240610104437",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240610111721",
        "description": ".history.app_20240610111721",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240610111721",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240610210028",
        "description": ".history.app_20240610210028",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240610210028",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240613113357",
        "description": ".history.app_20240613113357",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240613113357",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": ".history.app_20240613233355",
        "description": ".history.app_20240613233355",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": ".history.app_20240613233355",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():\n    return 'Welcome to my Flask app!'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    return 'Welcome to my Flask app!'\n@app.post('/signup')\ndef signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup():\n    data = request.get_json()\n    name = data[\"name\"]\n    email = data[\"email\"]\n    password = data[\"password\"]\n    if not email:\n        return {\"message\": \"Email harus diisi\"}, 400\n    hashed_password = ph.hash(password)\n    new_user = User(email=email, name=name, password=hashed_password)\n    db.session.add(new_user)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not email or not password:\n        return {\"message\": \"Email dan kata sandi diperlukan!\"}, 400\n    user = User.query.filter_by(email=email).first()\n    if not user or not ph.verify(user.password, password):\n        return {\"message\": \"Email atau kata sandi salah!\"}, 400\n    access_token = create_access_token(identity=user.id)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    return {\"id\": user.id, \"email\": user.email, \"name\": user.name}, 200\n@app.put(\"/updateprofile\")\n@jwt_required()\ndef update_profile():\n    user_id = get_jwt_identity()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update_profile():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    new_name = data.get(\"name\")\n    new_email = data.get(\"email\")\n    if not new_name or not new_email:\n        return {\"message\": \"Nama dan email harus diisi.\"}, 400",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def change_password():\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return {\"message\": \"Pengguna tidak ditemukan.\"}, 404\n    data = request.json\n    old_password = data.get(\"old_password\")\n    new_password = data.get(\"new_password\")\n    if not old_password or not new_password:\n        return {\"message\": \"Kata sandi lama dan baru harus diisi.\"}, 400",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_DATABASE_URI\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"mysql://root:@127.0.0.1/myflask1\"\ndb = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\napp.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_SECRET_KEY\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"JWT_SECRET_KEY\"] = \"super-secret\"\napp.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"JWT_ACCESS_TOKEN_EXPIRES\"] = timedelta(days=1)\njwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "jwt = JWTManager(app)\nph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ph = PasswordHasher()\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(80), nullable=False)\n    password = db.Column(db.String(200), nullable=False)\nwith app.app_context():\n    db.create_all()\n@app.route('/')\ndef home():",
        "detail": "app",
        "documentation": {}
    }
]